<mxfile host="app.diagrams.net" modified="2022-11-09T15:27:53.428Z" agent="5.0 (X11)" etag="5ddgg9wnaRqHGPsQum3M" version="20.5.3" type="github">
  <diagram id="gKHhVE1iPBJTauDnVtQz" name="Page-1">
    <mxGraphModel dx="1408" dy="747" grid="1" gridSize="20" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1654" pageHeight="2336" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="FN8Ck3nnoSoxogU4fabU-40" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;labelBackgroundColor=none;strokeColor=#00CC00;exitX=0;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="FN8Ck3nnoSoxogU4fabU-57" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="560" y="327" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-16" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;Router&lt;br&gt;&lt;font style=&quot;font-weight: normal;&quot; color=&quot;#575757&quot;&gt;Router contains routing configuration. It is basically a switch. It switches page components based on the browser URL.&lt;/font&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="100" y="459" width="460" height="120" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-19" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;EditorPage&lt;br&gt;&lt;font style=&quot;font-weight: normal;&quot; color=&quot;#575757&quot;&gt;Editor is the layout for our editor. It arranges sub-components.&lt;/font&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="99.99999999999999" y="619" width="460" height="100" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-22" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;Survey&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="596" y="856" width="160" height="40" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-23" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;QuestionGroup&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="596" y="940" width="159.98" height="45" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-25" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;Question&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="596" y="1023" width="159.98" height="37.65" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-40" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;SideBarLeft&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="212" y="856" width="160" height="40" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-41" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;SideBarRight&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="392" y="856" width="160" height="40" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-94" value="React Component Structure Overview" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=42;fontStyle=1;rounded=0;" parent="1" vertex="1">
          <mxGeometry y="6" width="800" height="60" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-42" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;TopBar&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="26.00000000000003" y="856" width="159.98" height="40" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-111" value="useApi()&lt;br style=&quot;font-size: 19px;&quot;&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;This is a custom hook we create ourselves which wraps the useQuery() functionality for a specific component into its own hook. In this way we separate&amp;nbsp;data management&amp;nbsp;logic from display logic.&lt;/span&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="566" y="1455" width="520" height="180" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-106" value="State Management Elements" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=42;fontStyle=1;rounded=0;" parent="1" vertex="1">
          <mxGeometry y="1185" width="600" height="60" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-109" value="useState()&lt;br style=&quot;font-size: 19px;&quot;&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;This is a hook provided by React and is generally used to manage state within a single component. It allows you to define a default state value and a setter for that value. Whenever you call the setter to mutate the value the containing component will re-render.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="26" y="1255" width="520" height="180" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-110" value="useQuery()&lt;br style=&quot;font-size: 19px;&quot;&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;This is a hook provided by react-query. It allows you to define a query function which retrieves state in whatever way it likes. It could be http request but it can be anything. The hook provides helpful functionality such as the ability monitor the query progress, error state. It also providing caching and auto-refresh functionality.&lt;/span&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="566" y="1255" width="520" height="180" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-112" value="Entity Classes&lt;br style=&quot;font-size: 19px;&quot;&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;We can model our data structures using OO design with entity classes. These entity classes can then be consumed by our useApi() hooks. Entity classes separate&amp;nbsp;domain logic from implementation specific usage and data persistence&amp;nbsp;logic.&lt;/span&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="26.000000000000007" y="1455" width="514.36" height="180" as="geometry" />
        </mxCell>
        <mxCell id="jkbdHM3EtRgmcyWO4s81-120" value="State Management Example&lt;br style=&quot;font-size: 19px;&quot;&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;The React function component page/editor/survey/Survey.tsx call useApi() from page/editor/model/SurveyUseApi.ts. Which provides the &#39;survey&#39; object and a mutator method &#39;updateTitle&#39;.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;Using the &#39;survey&#39; object we render the entire survey component tree (question groups, questions, etc). We do this by looping over the data structure and rendering each element using a separate&amp;nbsp;component for each. Each question-group rendered using QuestionGroup component, then each question is rendered as a Question component nested within its QuestionGroup component. Both the question-group and the question receive&amp;nbsp;their data as a prop. &lt;br&gt;&lt;br&gt;In the QuestionGroup component we take the questionGroup prop data and render the question group title into a Form.Control which is a text input field. The QuestionGroup component also calls the useApi() (&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;color: rgb(87, 87, 87); font-size: 14px; font-weight: 400;&quot;&gt;page/editor/model/SurveyUseApi.ts&lt;/span&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;&lt;br&gt;) hook and uses the exported updateQuestionGroup() method in the onChange() method of the&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;color: rgb(87, 87, 87); font-size: 14px; font-weight: 400;&quot;&gt;Form.Control. Now when we type in the group title the Form.Control, its&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(87, 87, 87); font-size: 14px; font-weight: 400;&quot;&gt;onChange() event handler calls&amp;nbsp;&lt;/span&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;updateQuestionGroup(id, {...newdata}) with the new value, which in turn propagates&amp;nbsp;this new state to react-query using the useMutate() hook. The survey data has been updated the which causes the main Survey component to re-render and display the new state.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;In order for this to work correctly the component responsible for rendering the state (Survey.tsx in this case) must receive&amp;nbsp;new state. Since the component is monitoring the &#39;survey&#39; object, this data structure must be replaced with a new object in order for the Survey component to be notified about the state change and trigger a re-render. Mutating a leaf node of the survey data is not enough. React is only able to monitor an objects root identity and is not aware of changes to data within the object. To handle this the mutation methods we created in&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;color: rgb(87, 87, 87); font-size: 14px; font-weight: 400;&quot;&gt;SurveyUseApi.ts mutate the survey data using its Entity class methods and then copy the mutated survey object to a new object in order to trigger Reacts state monitoring and re-render.&lt;/span&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=left;verticalAlign=top;fontStyle=1;fontSize=20;perimeterSpacing=0;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="26" y="1655" width="827" height="582" as="geometry" />
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-20" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.513;exitY=0.836;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="FN8Ck3nnoSoxogU4fabU-52" target="FN8Ck3nnoSoxogU4fabU-58" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="1372" y="827.06" as="sourcePoint" />
            <mxPoint x="1372" y="894.6999999999998" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-42" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fontSize=14;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontColor=#FF3333;strokeColor=#FF3333;" parent="1" source="FN8Ck3nnoSoxogU4fabU-52" target="FN8Ck3nnoSoxogU4fabU-57" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-43" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeColor=#FF3333;fontSize=14;fontColor=#FF3333;exitX=0;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="FN8Ck3nnoSoxogU4fabU-52" target="jkbdHM3EtRgmcyWO4s81-19" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="881" y="532" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-51" value="useMutation()&lt;br style=&quot;font-size: 19px;&quot;&gt;&lt;font color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;This is a hook provided by react-query. It allows you to define a query function which modifies state, usually by making a REST API request. It provides functionality for tracking and managing the progress of the mutation.&lt;/span&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelPosition=center;verticalLabelPosition=middle;align=center;verticalAlign=top;fontStyle=1;fontSize=20;spacing=20;" parent="1" vertex="1">
          <mxGeometry x="1099" y="1255" width="520" height="180" as="geometry" />
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-52" value="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 20px; font-weight: 700;&quot;&gt;&amp;lt;page&amp;gt;/model/&amp;lt;Component&amp;gt;UseApi.ts&lt;/span&gt;&lt;br style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-weight: 700; font-size: 19px;&quot;&gt;&lt;font style=&quot;font-family: Helvetica; font-size: 20px; font-weight: 700;&quot; color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;Component specific useApi() hook which exports component specific state management&amp;nbsp;functionality. This keeps state management&amp;nbsp;logic separate&amp;nbsp;from the component view logic.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="shape=document;whiteSpace=wrap;html=1;boundedLbl=1;fontFamily=Courier New;fontSize=15;fontColor=#333333;spacing=20;fillColor=#f5f5f5;strokeColor=#666666;" parent="1" vertex="1">
          <mxGeometry x="1165" y="634" width="430" height="217.94" as="geometry" />
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-60" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;strokeColor=#000000;fontFamily=Courier New;fontSize=15;fontColor=#000000;" parent="1" source="FN8Ck3nnoSoxogU4fabU-57" target="FN8Ck3nnoSoxogU4fabU-52" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-57" value="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 20px; font-weight: 700;&quot;&gt;Query.ts&lt;/span&gt;&lt;br style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-weight: 700; font-size: 19px;&quot;&gt;&lt;font style=&quot;font-family: Helvetica; font-size: 20px; font-weight: 700;&quot; color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;Query exports the queryClient which holds the react-query state and allows other components to access to state via the exported hooks such as useQuery() and useMutation().&lt;/span&gt;&lt;/font&gt;&lt;font style=&quot;font-family: Helvetica; font-size: 20px; font-weight: 700;&quot; color=&quot;#575757&quot;&gt;&lt;br&gt;&lt;/font&gt;" style="shape=document;whiteSpace=wrap;html=1;boundedLbl=1;fontFamily=Courier New;fontSize=15;fontColor=#333333;spacing=20;fillColor=#f5f5f5;strokeColor=#666666;" parent="1" vertex="1">
          <mxGeometry x="1165" y="218.03" width="430" height="217.94" as="geometry" />
        </mxCell>
        <mxCell id="FN8Ck3nnoSoxogU4fabU-58" value="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 20px; font-weight: 700;&quot;&gt;&amp;lt;page&amp;gt;/model/&amp;lt;Entity&amp;gt;.ts&lt;/span&gt;&lt;br style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-weight: 700; font-size: 19px;&quot;&gt;&lt;font style=&quot;font-family: Helvetica; font-size: 20px; font-weight: 700;&quot; color=&quot;#575757&quot;&gt;&lt;span style=&quot;font-size: 14px; font-weight: 400;&quot;&gt;This is a class for modelling an entity. It provides query and mutation logic for the related entity data. It may compose other entities.&lt;br&gt;&lt;br&gt;Entities generally&amp;nbsp;have no dependancies other than other entities and so are very easy to unit test.&lt;/span&gt;&lt;/font&gt;&lt;font style=&quot;font-family: Helvetica; font-size: 20px; font-weight: 700;&quot; color=&quot;#575757&quot;&gt;&lt;br&gt;&lt;/font&gt;" style="shape=document;whiteSpace=wrap;html=1;boundedLbl=1;fontFamily=Courier New;fontSize=15;fontColor=#333333;spacing=20;fillColor=#f5f5f5;strokeColor=#666666;" parent="1" vertex="1">
          <mxGeometry x="1170" y="880" width="430" height="290.94" as="geometry" />
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-1" value="&lt;div&gt;1&lt;/div&gt;" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="WFzyRqZtoB-0MjAKmUww-7" target="WFzyRqZtoB-0MjAKmUww-9" edge="1">
          <mxGeometry x="0.0545" y="11" relative="1" as="geometry">
            <mxPoint x="330" y="192" as="sourcePoint" />
            <mxPoint x="330" y="247" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-2" value="&lt;div&gt;1&lt;/div&gt;" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="WFzyRqZtoB-0MjAKmUww-9" target="jkbdHM3EtRgmcyWO4s81-16" edge="1">
          <mxGeometry x="0.0545" y="11" relative="1" as="geometry">
            <mxPoint x="330" y="407" as="sourcePoint" />
            <mxPoint x="350" y="267" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-3" value="&lt;div&gt;1&lt;/div&gt;" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-16" target="jkbdHM3EtRgmcyWO4s81-19" edge="1">
          <mxGeometry x="0.0545" y="11" relative="1" as="geometry">
            <mxPoint x="350" y="427" as="sourcePoint" />
            <mxPoint x="350" y="479" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-4" value="&lt;div&gt;1&lt;/div&gt;" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-19" target="jkbdHM3EtRgmcyWO4s81-42" edge="1">
          <mxGeometry x="0.8726" y="10" relative="1" as="geometry">
            <mxPoint x="350" y="599" as="sourcePoint" />
            <mxPoint x="350" y="639" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-5" value="1" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-19" target="jkbdHM3EtRgmcyWO4s81-40" edge="1">
          <mxGeometry x="0.7277" y="12" relative="1" as="geometry">
            <mxPoint x="282" y="731" as="sourcePoint" />
            <mxPoint x="165.9849999999999" y="876" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-7" value="&lt;div&gt;1&lt;/div&gt;" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.25;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-19" target="jkbdHM3EtRgmcyWO4s81-22" edge="1">
          <mxGeometry x="0.9052" y="20" relative="1" as="geometry">
            <mxPoint x="465" y="739" as="sourcePoint" />
            <mxPoint x="624.44" y="876" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-8" value="n" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-22" target="jkbdHM3EtRgmcyWO4s81-23" edge="1">
          <mxGeometry x="0.0545" y="11" relative="1" as="geometry">
            <mxPoint x="715.98" y="897" as="sourcePoint" />
            <mxPoint x="834.4200000000001" y="880" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-10" value="n" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-23" target="jkbdHM3EtRgmcyWO4s81-25" edge="1">
          <mxGeometry x="0.0545" y="11" relative="1" as="geometry">
            <mxPoint x="735.98" y="917" as="sourcePoint" />
            <mxPoint x="735.9849999999999" y="960" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-12" value="&lt;div&gt;1&lt;/div&gt;" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=bottom;rounded=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-19" target="jkbdHM3EtRgmcyWO4s81-41" edge="1">
          <mxGeometry x="0.881" y="10" relative="1" as="geometry">
            <mxPoint x="350" y="739" as="sourcePoint" />
            <mxPoint x="266" y="876" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-13" value="&lt;div&gt;«interface»&lt;/div&gt;&lt;div&gt;&lt;b&gt;QuestionTypeInterface&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;" style="html=1;" parent="1" vertex="1">
          <mxGeometry x="835" y="1016.83" width="169" height="50" as="geometry" />
        </mxCell>
        <mxCell id="-dQODk_kFmiYLRuxT_So-14" value="" style="endArrow=block;dashed=1;endFill=0;endSize=12;html=1;rounded=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="jkbdHM3EtRgmcyWO4s81-25" target="-dQODk_kFmiYLRuxT_So-13" edge="1">
          <mxGeometry width="160" relative="1" as="geometry">
            <mxPoint x="859" y="1057" as="sourcePoint" />
            <mxPoint x="1019" y="1057" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="WFzyRqZtoB-0MjAKmUww-7" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;i&gt;&amp;lt;&amp;lt;Component&amp;gt;&amp;gt;&lt;/i&gt;&lt;br&gt;&lt;b&gt;App&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;+ &lt;br&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;+ &lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=12;fontFamily=Helvetica;html=1;rounded=0;sketch=0;" vertex="1" parent="1">
          <mxGeometry x="235" y="60" width="190" height="140" as="geometry" />
        </mxCell>
        <mxCell id="WFzyRqZtoB-0MjAKmUww-9" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;i&gt;&amp;lt;&amp;lt;Component&amp;gt;&amp;gt;&lt;/i&gt;&lt;br&gt;&lt;b&gt;PersistQueryClientProvider&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;+ &lt;br&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;+ &lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=12;fontFamily=Helvetica;html=1;rounded=0;sketch=0;" vertex="1" parent="1">
          <mxGeometry x="235" y="257" width="190" height="140" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
